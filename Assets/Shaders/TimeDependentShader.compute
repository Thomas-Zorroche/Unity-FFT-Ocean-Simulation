#pragma kernel ComputeTimeDependentSpectrum

RWTexture2D<float2> HK_Dx;
RWTexture2D<float2> HK_Dy;
RWTexture2D<float2> HK_Dz;

RWTexture2D<float4> H0_K_tilde;
RWTexture2D<float4> H0_MINUSK_tilde;

float Time;
float Size;
float lengthScale;
float L;
float g;

static const float PI = 3.1415926;

struct complex
{
	float real;
	float im;
};

complex make_complex(float real, float im)
{
	complex c;
	c.real = real;
	c.im = im;
	return c;
}

complex mul(complex c0, complex c1)
{
	complex c;
	c.real = c0.real * c1.real - c0.im * c1.im;
	c.im = c0.real * c1.im + c0.im * c1.real;
	return c;
}

complex add(complex c0, complex c1)
{
	complex c;
	c.real = c0.real + c1.real;
	c.im = c0.im + c1.im;
	return c;
}

complex conj(complex c)
{
	return make_complex(c.real, -c.im);
}


[numthreads(8,8,1)]
void ComputeTimeDependentSpectrum(uint3 id : SV_DispatchThreadID)
{
    float2 x = float2(id.xy) - float(Size) / 2.0;

    float2 k = float2(2.0 * PI * x.x / L, 2.0 * PI * x.y / L) * lengthScale;

	float magnitude = length(k);
	if (magnitude < 0.0001) magnitude = 0.0001;

	float w = sqrt(g * magnitude);

	complex fourier_amp = make_complex(H0_K_tilde[id.xy].r, H0_K_tilde[id.xy].g);
	complex fourier_amp_conj = conj(make_complex(H0_MINUSK_tilde[id.xy].r, H0_MINUSK_tilde[id.xy].g));

	float cosinus = cos(w * Time);
	float sinus = sin(w * Time);

	// euler formula
	complex exp_iwt = make_complex(cosinus, sinus);
	complex exp_iwt_inv = make_complex(cosinus, -sinus);

	// dy
	complex h_k_t_dy = add(mul(fourier_amp, exp_iwt), (mul(fourier_amp_conj, exp_iwt_inv)));

	complex h_k_t_dy_i = make_complex(-h_k_t_dy.im, h_k_t_dy.real);

	// dx
	complex dx = make_complex(0.0, -k.x / magnitude);
	complex h_k_t_dx = mul(dx, h_k_t_dy);

	// dz
	complex dy = make_complex(0.0, -k.y / magnitude);
	complex h_k_t_dz = mul(dy, h_k_t_dy);


	HK_Dx[id.xy] = float2(h_k_t_dx.real, h_k_t_dx.im);
	HK_Dy[id.xy] = float2(0, h_k_t_dy.im);
	HK_Dz[id.xy] = float2(h_k_t_dz.real, h_k_t_dz.im);
}
